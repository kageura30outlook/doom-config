#+TITLE: My Doom Emacs Config
#+PROPERTY: header-args :tangle config.el
#+AUTHOR: kageura30outlook

* Introduction
This is my literate Doom Emacs configuration.
All code blocks here are tangled into config.el.

* custom-safe-themes
#+begin_src emacs-lisp
(setq custom-safe-themes
      '("77f281064ea1c8b14938866e21c4e51e4168e05db98863bd7430f1352cab294a" default))
#+end_src
* UI
#+begin_src emacs-lisp
(setq doom-theme 'doom-moonlight)
#+end_src
* MCP Servers
#+begin_src emacs-lisp
;; Ensure `mcp.el` is correctly located in the `.doom.d` folder.
(add-to-list 'load-path (expand-file-name "mcp.el" "~/.doom.d/"))

;; Load and configure MCP package.
(use-package! mcp
  :after gptel
  :custom
  (setq mcp-hub-servers
      '(("filesystem" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-filesystem" "/Users/Kageura/Documents/")))
        ("fetch" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-fetch")))
        ("memory" . (:command "npx" :args ("-y" "@pulsemcp/basic-memory")))
        ("sequencethink" . (:command "npx" :args ("-y" "@arben-adm/mcp-sequential-thinking")))
        ("git" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-github")))
        ("python-sdk" . (:command "python3" :args ("-m" "mcp.server.fastmcp" "--spec" "python-sdk")))
        ("puppeteer" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-puppeteer")))
        ("emacs" . (:command "bash" :args ("-c" "~/.config/doom/bin/doomscript ~/.config/doom/bin/emacs-mcp")))))

  :config
  ;; Load the MCP hub component.
  (require 'mcp-hub)
  ;; Start all servers after Emacs initialization.
  (add-hook 'after-init-hook #'mcp-hub-start-all-server))
#+end_src
* Meta key setup
#+begin_src emacs-lisp
(setq mac-command-modifier      'super
      ns-command-modifier       'super
      mac-option-modifier       'meta
      ns-option-modifier        'meta
      mac-left-option-modifier 'meta)
#+end_src
* Fonts
Fonts config
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 15)
      doom-big-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
 '(font-lock-comment-face :slant italic)
 '(font-lock-keyword-face :slant italic))
#+end_src
* Lines
#+begin_src emacs-lisp
(setq display-line-numbers-type t)  ;; Absolute line numbers
(map! :leader
       :desc "Toggle truncate lines"
        "t t" #'toggle-truncate-lines)
#+end_src

* Org Mode
Set up my org directory for notes and tasks.

#+begin_src emacs-lisp
(setq org-directory "~/org-roam/"
      org-hide-emphasis-markers t)

#+end_src

* Org Roam V2
My knowledge management system using Org-Roam v2.

#+begin_src emacs-lisp
(use-package! org-roam
  :init
  (setq org-roam-v2-ack t)  ;; acknowledge v2
  :custom
  (org-roam-directory (file-truename "~/org-roam")) ;; your notes directory
  (org-roam-completion-everywhere t)
  :config
  (org-roam-db-autosync-enable) ;; keeps database updated
  (map! :leader
        :prefix "n"
        :desc "Find node" "r f" #'org-roam-node-find
        :desc "Insert node" "r i" #'org-roam-node-insert
        :desc "Show graph" "r g" #'org-roam-graph
        :desc "Capture node" "r c" #'org-roam-capture))

#+end_src

* Keybindings
Custom keybindings for faster access.

#+begin_src emacs-lisp
(map! :leader
      :desc "Edit config.org" "f i" #'(lambda () (interactive) (find-file "~/.doom.d/config.org")))

#+end_src

* GPTel Keybinds
:PROPERTIES:
:ORDERED:  t
:END:
#+begin_src emacs-lisp
(map! :leader
      :desc "Run GPTel" "c g" #'gptel
      :desc "GPTel menu" "m g" #'gptel-menu
      :desc "GPTel rewrite" "r g" #'gptel-rewrite
      :desc "GPT Chat" "s g" #'gptel-send)
#+end_src

#+begin_src emacs-lisp
(defun +open-vterm ()
  "Open a new vterm in a vertical split or switch to it."
  (interactive)
  (if (get-buffer "*vterm*")
      (pop-to-buffer "*vterm*")
    (select-window (split-window-right))
    (vterm)))

(defun +vterm-switch ()
  "Switch to the most recent vterm buffer."
  (interactive)
  (if-let ((buf (car (seq-filter
                      (lambda (b) (string-match-p "\\*vterm" (buffer-name b)))
                      (buffer-list)))))
      (pop-to-buffer buf)
    (message "No vterm buffer found.")))
#+end_src
* vterm
#+begin_src emacs-lisp
(after! vterm
  (setq vterm-shell "/bin/zsh")  ;; Replace with your preferred shell
  (setq vterm-max-scrollback 10000)
  (setq vterm-kill-buffer-on-exit t))
#+end_src*
** vterm integration
#+begin_src emacs-lisp

 (after! vterm
  (set-popup-rule! "*doom:vterm-popup:*"
    :size 0.30
    :vslot -4
    :select t
    :quit nil
    :ttl 0
    :side 'right)
  (setq vterm-shell "/bin/zsh")
  (setq vterm-max-scrollback 10000
        vterm-kill-buffer-on-exit t))
(map! :leader
      :desc "Toggle vterm popup" "o t" #'+vterm/toggle
      :desc "Open vterm here"    "o T" #'+vterm/here)
#+end_src
** opencode with vterm
#+begin_src emacs-lisp
(map! :leader
      :desc "Opencode in terminal" "o o"
      (lambda ()
        (interactive)
        (+vterm/here)
        (vterm-send-string "opencode")
        (vterm-send-return)))
#+end_src

* Key loading
#+begin_src emacs-lisp
(setq gptel-api-key (getenv "OPENAI_API_KEY"))
#+end_src
* GPTel Setup
#+begin_src emacs-lisp
(use-package! gptel
  :config
  (setq gptel-model 'o4-mini)
  (setq gptel-backend
        (gptel-make-openai
         "OpenAI"
         :key  #'gptel-api-key
         :stream t
         :models '(o4-mini))))
#+end_src

* Emacs window tilling fix
#+begin_src emacs-lisp
(menu-bar-mode t)
#+end_src
* Keybinding fixes & OpenCode integration
#+begin_src emacs-lisp
(defun my/vterm-here-safe (&optional arg)
  "Safely call +vterm/here with optional ARG to avoid wrong-args error."
  (interactive "P")
  (+vterm/here arg))

(map! :leader
      :desc "Toggle vterm popup"    "o t" #'+vterm/toggle
      :desc "Open inline vterm"     "o T" #'my/vterm-here-safe
      :desc "Open vterm & launch OpenCode" "o o"
      (lambda ()
        (interactive)
        ;; open inline vterm safely
        (my/vterm-here-safe)
        ;; launch OpenCode CLI in that terminal buffer
        (vterm-send-string "opencode")
        (vterm-send-return)))
#+end_src
* ivy-posframe config
#+begin_src emacs-lisp
(use-package! ivy-posframe
  :after ivy
  :init
  (ivy-posframe-mode 1)
  :config
  (setq ivy-posframe-display-functions-alist
        '((t . ivy-posframe-display-at-frame-center))) ;; Pop up at the center
  (setq ivy-posframe-parameters
        '((internal-border-width . 10)
          (left-fringe . 8)
          (right-fringe . 8)))
  (ivy-posframe-mode 1))
#+end_src

* Ivy Mode
Force ivy-mode to start early
#+begin_src emacs-lisp
(after! ivy
  (ivy-mode 1)  ;; Ensures ivy-mode is on
  ;; Optional: recommended for performance and UX
  (setq ivy-use-virtual-buffers t
        ivy-count-format "(%d/%d) "
        enable-recursive-minibuffers t))
#+end_src

#+RESULTS:

* Auto tangle

#+begin_src emacs-lisp
(defun config-org-auto-tangle ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.doom.d/config.org"))
    (org-babel-tangle)))

(add-hook 'after-save-hook #'config-org-auto-tangle)
#+end_src

#+RESULTS:
| config-org-auto-tangle | doom-modeline-update-vcs | doom-modeline-update-buffer-file-name | +evil-display-vimlike-save-message-h | doom-auto-revert-buffers-h | doom-guess-mode-h |

* Summary
1. *Meta Key Setup:* Configures the meta and command key settings, primarily for Mac systems, to customize which key acts as 'super' or 'meta.'

2. *Fonts:* Sets up font specifications and applies them to various components within Emacs such as comment faces and keywords.

3. *UI Theme:* Configures visual themes, specifically setting the theme to 'doom-moonlight.'

4. *Org Mode:* Establishes settings for using Org Mode, including the directory for org files and customization to hide emphasis markers for cleaner text.

5. *Org Roam V2:* Integrates Org-Roam for knowledge management. It sets up node finding, insertion, and management wizards along with database synchronization.

6. *Keybindings:* Custom keybindings are defined for quick access to frequent commands, such as opening configuration files, toggling line numbers, and interacting with vterm (a terminal emulator).

7. *Vterm Configurations:* Provides commands to open, switch to, and manage vterm; configurations include setting the default shell and buffer behavior.

8. *GPTel Setup:* Configures integration with GPTel for accessing OpenAI models, with keybindings to send queries or interact with the GPTel environment.

9. *Auto-tangle:* A hook automatically tangles this org document into an Emacs Lisp configuration file upon saving, ensuring the latest configurations are used.

10. *ivy-posframe Config:* Customizes the appearance and behavior of Ivy, a completion and narrowing framework, using the ivy-posframe package for better UI aesthetics like centered pop-ups.

The document ends with an auto-tangle function to ensure any changes made to the org file automatically update the config file used by Emacs on save. This setup automates maintaining an organized, single-source version of Emacs configurations.

